// from https://www.w3schools.com/typescript/typescript_simple_types.php
=================>>> <<<=================
// Explicit Type
let firstName: string = "Dylan";
 
// Implicit Type
let firstName = "Dylan";

=================>>> <<<=================
Type: any
any is a type that disables type checking and effectively allows all types to be used.

let v: any = true;
v = "string"; // no error as it can be "any" type
Math.round(v); // no error as it can be "any" type

=================>>> <<<================= 
TypeScript Arrays
 
const names: string[] = [];
names.push("Dylan"); // no error
// names.push(3); // Error: Argument of type 'number' is not assignable to parameter of type 'string'.

.length   
  
.join()
.toString()
.pop()
.push()
.shift()
.unshift() 
sort()
reverse()
forEach()
map()
filter() 
reduce() 
reduceRight()
every()
some()
indexOf() 
lastIndexOf()
find()
findIndex() 
from() 
entries()


=================>>> <<<=================
Readonly
The readonly keyword can prevent arrays from being changed.

const names: readonly string[] = ["Dylan"];
names.push("Jack"); // Error: Property 'push' does not exist on type 'readonly string[]'.
// try removing the readonly modifier and see if it works?

=================>>> <<<=================
TypeScript Tuples
 
// define our tuple
let ourTuple: [number, boolean, string];

// initialize correctly
ourTuple = [5, false, 'Coding God was here'];

=================>>> <<<=================
Named Tuples
Named tuples allow us to provide context for our values at each index.
const graph: [x: number, y: number] = [55.2, 41.3];

=================>>> <<<=================
Destructuring Tuples
Since tuples are arrays we can also destructure them.

const graph: [number, number] = [55.2, 41.3];
const [x, y] = graph;

=================>>> <<<=================
TypeScript Object Types

const car: { type: string, model: string, year: number } = {
  type: "Toyota",
  model: "Corolla",
  year: 2009
};
=================>>> <<<=================
Type Inference
const car = {
  type: "Toyota",
};
car.type = "Ford"; // no error
car.type = 2; // Error: Type 'number' is not assignable to type 'string'.

=================>>> <<<=================
Optional Properties

const car: { type: string, mileage?: number } = { // no error
  type: "Toyota"
};
car.mileage = 2000;

=================>>> <<<=================
Index Signatures
Index signatures can be used for objects without a defined list of properties.

const nameAgeMap: { [index: string]: number } = {};
nameAgeMap.Jack = 25; // no error
nameAgeMap.Mark = "Fifty"; // Error: Type 'string' is not assignable to type 'number'.
=================>>> <<<=================
TypeScript Enums
An enum is a special "class" that represents a group of constants (unchangeable variables).

Numeric Enums - Default
By default, enums will initialize the first value to 0 and add 1 to each additional value:

enum CardinalDirections {
  North,
  East,
  South,
  West
}
let currentDirection = CardinalDirections.North;
// logs 0
console.log(currentDirection);
// throws error as 'North' is not a valid enum
currentDirection = 'North'; // Error: "North" is not assignable to type 'CardinalDirections'.

=================>>> <<<=================
Numeric Enums - Initialized
You can set the value of the first numeric enum and have it auto increment from that:

enum CardinalDirections {
  North = 1,
  East,
  South,
  West
}
// logs 1
console.log(CardinalDirections.North);
// logs 4
console.log(CardinalDirections.West);
=================>>> <<<=================
Numeric Enums - Fully Initialized
You can assign unique number values for each enum value. Then the values will not incremented automatically:

Example
enum StatusCodes {
  NotFound = 404,
  Success = 200,
  Accepted = 202,
  BadRequest = 400
}
// logs 404
console.log(StatusCodes.NotFound);
// logs 200
console.log(StatusCodes.Success);

=================>>> <<<=================
String Enums

enum CardinalDirections {
  North = 'North',
  East = "East",
  South = "South",
  West = "West"
};
// logs "North"
console.log(CardinalDirections.North);
// logs "West"
console.log(CardinalDirections.West);

=================>>> <<<=================
TypeScript Type Aliases and Interfaces
 
Type Aliases

type CarYear = number
type CarType = string
type CarModel = string
type Car = {
  year: CarYear,
  type: CarType,
  model: CarModel
}

const carYear: CarYear = 2001
const carType: CarType = "Toyota"
const carModel: CarModel = "Corolla"
const car: Car = {
  year: carYear,
  type: carType,
  model: carModel
};

=================>>> <<<=================
Interfaces
Interfaces are similar to type aliases, except they only apply to object types.

interface Rectangle {
  height: number,
  width: number
}

const rectangle: Rectangle = {
  height: 20,
  width: 10
};

=================>>> <<<=================
Extending Interfaces
Extending an interface means you are creating a new interface with the same properties as the original, plus something new.

Example
interface Rectangle {
  height: number,
  width: number
}

interface ColoredRectangle extends Rectangle {
  color: string
}

const coloredRectangle: ColoredRectangle = {
  height: 20,
  width: 10,
  color: "red"
};

=================>>> <<<=================
TypeScript Union Types 

Union | (OR)
Using the | we are saying our parameter is a string or number:
 
function printStatusCode(code: string | number) {
  console.log(`My status code is ${code}.`)
}
printStatusCode(404);
printStatusCode('404');
=================>>> <<<=================
Union Type Errors
Note: you need to know what your type is when union types are being used to avoid type errors:
 
function printStatusCode(code: string | number) {
  console.log(`My status code is ${code.toUpperCase()}.`) // error: Property 'toUpperCase' does not exist ontype 'string | number'.
  Property 'toUpperCase' does not exist on type 'number'
}

=================>>> <<<=================
TypeScript Functions

Return Type
The type of the value returned by the function can be explicitly defined.

// the `: number` here specifies that this function returns a number
function getTime(): number {
  return new Date().getTime();
}

=================>>> <<<=================
Void Return Type
The type void can be used to indicate a function doesn't return any value.

function printHello(): void {
  console.log('Hello!');
}
=================>>> <<<=================
Parameters
Function parameters are typed with a similar syntax as variable declarations.

Example
function multiply(a: number, b: number) {
  return a * b;
}

=================>>> <<<=================
Optional Parameters
By default TypeScript will assume all parameters are required, but they can be explicitly marked as optional.

Example
// the `?` operator here marks parameter `c` as optional
function add(a: number, b: number, c?: number) {
  return a + b + (c || 0);
}

=================>>> <<<=================
Default Parameters
For parameters with default values, the default value goes after the type annotation:
 
function pow(value: number, exponent: number = 10) {
  return value ** exponent;
}

=================>>> <<<=================
Named Parameters
Typing named parameters follows the same pattern as typing normal parameters.
 
function divide({ dividend, divisor }: { dividend: number, divisor: number }) {
  return dividend / divisor;
}
=================>>> <<<=================
Rest Parameters
The rest parameter syntax allows a function to accept an indefinite number of arguments as an array 

function add(a: number, b: number, ...rest: number[]) {
  return a + b + rest.reduce((p, c) => p + c, 0);
}
=================>>> <<<=================
Type Alias

type Negate = (value: number) => number;
// in this function, the parameter `value` automatically gets assigned the type `number` from the type `Negate`
const negateFunction: Negate = (value) => value * -1;

=================>>> <<<=================
TypeScript Casting
There are times when working with types where it's necessary to override the type of a variable, such as when incorrect types are provided by a library.

Casting is the process of overriding a type.

Casting with as
A straightforward way to cast a variable is using the as keyword, which will directly change the type of the given variable.
  
let x: unknown = 'hello';
console.log((x as string).length);


Casting doesn't actually change the type of the data within the variable, for example the following code with not work as expected since the variable x is still holds a number.

let x: unknown = 4;
console.log((x as string).length); // prints undefined since numbers don't have a length

=================>>> <<<=================
Casting with <>
Using <> works the same as casting with as.
 
let x: unknown = 'hello';
console.log((<string>x).length);

=================>>> <<<=================
Force casting
To override type errors that TypeScript may throw when casting, first cast to unknown, then to the target type.
 
let x = 'hello';
console.log(((x as unknown) as number).length); // x is not actually a number so this will return undefined
=================>>> <<<=================
TypeScript Classes

Members: Types
The members of a class (properties & methods) are typed using type annotations, similar to variables.

Example
class Person {
  name: string;
}

const person = new Person();
person.name = "Jane";
=================>>> <<<=================
Members: Visibility
Class members also be given special modifiers which affect visibility.

There are three main visibility modifiers in TypeScript.

public - (default) allows access to the class member from anywhere
private - only allows access to the class member from within the class
protected - allows access to the class member from itself and any classes that inherit it, which is covered in the inheritance section below

class Person {
  private name: string;

  public constructor(name: string) {
    this.name = name;
  }

  public getName(): string {
    return this.name;
  }
}

const person = new Person("Jane");
console.log(person.getName()); // person.name isn't accessible from outside the class since it's private

=================>>> <<<=================
Parameter Properties
TypeScript provides a convenient way to define class members in the constructor, by adding a visibility modifiers to the parameter.

class Person {
  // name is a private member variable
  public constructor(private name: string) {}

  public getName(): string {
    return this.name;
  }
}

const person = new Person("Jane");
console.log(person.getName());

=================>>> <<<=================
Readonly
Similar to arrays, the readonly keyword can prevent class members from being changed.

class Person {
  private readonly name: string;

  public constructor(name: string) {
    // name cannot be changed after this initial definition, which has to be either at it's declaration or in the constructor.
    this.name = name;
  }

  public getName(): string {
    return this.name;
  }
}

const person = new Person("Jane");
console.log(person.getName());

=================>>> <<<=================
Inheritance: Implements
Interfaces (covered here) can be used to define the type a class must follow through the implements keyword.
 
interface Shape {
  getArea: () => number;
}

class Rectangle implements Shape {
  public constructor(protected readonly width: number, protected readonly height: number) {}

  public getArea(): number {
    return this.width * this.height;
  }
}

A class can implement multiple interfaces by listing each one after implements, separated by a comma like so: class Rectangle implements Shape, Colored {

=================>>> <<<=================
Inheritance: Extends
Classes can extend each other through the extends keyword. A class can only extends one other class.

Example
interface Shape {
  getArea: () => number;
}

class Rectangle implements Shape {
  public constructor(protected readonly width: number, protected readonly height: number) {}

  public getArea(): number {
    return this.width * this.height;
  }
}

class Square extends Rectangle {
  public constructor(width: number) {
    super(width, width);
  }

  // getArea gets inherited from Rectangle
}

=================>>> <<<=================
Override
When a class extends another class, it can replace the members of the parent class with the same name.

Newer versions of TypeScript allow explicitly marking this with the override keyword.

Example
interface Shape {
  getArea: () => number;
}

class Rectangle implements Shape {
  // using protected for these members allows access from classes that extend from this class, such as Square
  public constructor(protected readonly width: number, protected readonly height: number) {}

  public getArea(): number {
    return this.width * this.height;
  }

  public toString(): string {
    return `Rectangle[width=${this.width}, height=${this.height}]`;
  }
}

class Square extends Rectangle {
  public constructor(width: number) {
    super(width, width);
  }

  // this toString replaces the toString from Rectangle
  public override toString(): string {
    return `Square[width=${this.width}]`;
  }
}

=================>>> <<<=================
Abstract Classes
Classes can be written in a way that allows them to be used as a base class for other classes without having to implement all the members. This is done by using the abstract keyword. Members that are left unimplemented also use the abstract keyword.
 
abstract class Polygon {
  public abstract getArea(): number;

  public toString(): string {
    return `Polygon[area=${this.getArea()}]`;
  }
}

class Rectangle extends Polygon {
  public constructor(protected readonly width: number, protected readonly height: number) {
    super();
  }

  public getArea(): number {
    return this.width * this.height;
  }
}


=================>>> <<<=================
TypeScript Basic Generics
Generics allow creating 'type variables' which can be used to create classes, functions & type aliases that don't need to explicitly define the types that they use.

Generics makes it easier to write reusable code.


Functions
Generics with functions help make more generalized methods which more accurately represent the types used and returned.

function createPair<S, T>(v1: S, v2: T): [S, T] {
  return [v1, v2];
}
console.log(createPair<string, number>('hello', 42)); // ['hello', 42]

=================>>> <<<=================
Classes
Generics can be used to create generalized classes, like Map.

Example
class NamedValue<T> {
  private _value: T | undefined;

  constructor(private name: string) {}

  public setValue(value: T) {
    this._value = value;
  }

  public getValue(): T | undefined {
    return this._value;
  }

  public toString(): string {
    return `${this.name}: ${this._value}`;
  }
}

let value = new NamedValue<number>('myNumber');
value.setValue(10);
console.log(value.toString()); // myNumber: 10

=================>>> <<<=================
Type Aliases
Generics in type aliases allow creating types that are more reusable.

type Wrapped<T> = { value: T };

const wrappedValue: Wrapped<number> = { value: 10 };

=================>>> <<<=================
Default Value
Generics can be assigned default values which apply if no other value is specified or inferred.

class NamedValue<T = string> {
  private _value: T | undefined;

  constructor(private name: string) {}

  public setValue(value: T) {
    this._value = value;
  }

  public getValue(): T | undefined {
    return this._value;
  }

  public toString(): string {
    return `${this.name}: ${this._value}`;
  }
}

let value = new NamedValue('myNumber');
value.setValue('myValue');
console.log(value.toString()); // myNumber: myValue

=================>>> <<<=================
Extends
Constraints can be added to generics to limit what's allowed. The constraints make it possible to rely on a more specific type when using the generic type.
 
function createLoggedPair<S extends string | number, T extends string | number>(v1: S, v2: T): [S, T] {
  console.log(`creating pair: v1='${v1}', v2='${v2}'`);
  return [v1, v2];
}
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
=================>>> <<<=================
