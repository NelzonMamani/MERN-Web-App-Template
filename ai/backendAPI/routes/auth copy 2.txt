 
const bcrypt = require("bcryptjs");
 
const config = require("config");

const express = require("express");
const router = express.Router();
const User = require("../models/user");
const { check, validationResult } = require("express-validator");
const auth = require("../middleware/auth"); 
// jsonwebtoken library (jwt) in the auth.js file 
// to generate JSON Web Tokens (JWT) for the user when they log in
// These tokens can be used to authenticate the user on subsequent requests to the server.
const jwt = require('jsonwebtoken');

const {verifyToken, authorize} = require('../config/middleware');
router.get('/admin', verifyToken, authorize, (req, res) => {
    res.send('Protected Route');
});


router.post('/register', (req, res) => {
    let newUser = new User({
        email: req.body.email,
        password: req.body.password,
        name: req.body.name
    });
    newUser.save((err, user) => {
        if (err) {
            res.status(500).send(err);
        } else {
            res.status(200).send(user);
        }
    });
});

router.post('/login', (req, res) => {
    User.findOne({ email: req.body.email }, (err, user) => {
        if (err) {
            res.status(500).send(err);
        } else if (!user) {
            res.status(404).send('user not found');
        } else {
            if (user.verifyPassword(req.body.password)) {
                let token = jwt.sign({
                    id: user._id,
                    email: user.email
                }, 'secret_key', { expiresIn: '1h' });
                res.status(200).send({ token });
            } else {
                res.status(401).send('unauthorized');
            }
        }
    });
});



// Create a user
router.post(
    "/register",
    [
      check("name", "Name is required").not().isEmpty(),
      check("email", "Please include a valid email").isEmail(),
      check(
        "password",
        "Please enter a password with 6 or more characters"
      ).isLength({ min: 6 }),
    ],
    async (req, res) => {
      const errors = validationResult(req);
      if (!errors.isEmpty()) {
        return res.status(400).json({ errors: errors.array() });
      }
      const { name, email, password } = req.body;
      try {
        let user = await User.findOne({ email });
        if (user) {
          return res.status(400).json({ errors: [{ msg: "User already exists" }] });
        }
        user = new User({
          name,
          email,
          password,
        });
        const salt = await bcrypt.genSalt(10);
        user.password = await bcrypt.hash(password, salt);
        await user.save();
        res.send("User registered");
      } catch (err) {
        console.error(err.message);
        res.status(500).send("Server error");
      }
    }
  );
  

// Get all users
router.get("/", auth, async (req, res) => {
  try {
    const users = await User.find({});
    res.json(users);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});

// Get user by ID
router.get("/:id", auth, async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ msg: "User not found" });
    }
    res.json(user);
  } catch (err) {
    console.error(err.message);
    if (err.kind === "ObjectId") {
      return res.status(404).json({ msg: "User not found" });
    }
    res.status(500).send("Server Error");
  }
});


// Update user by ID
router.patch("/:id", auth, async (req, res) => {
    const { name, email, password } = req.body;
  
    // Build user object
    const userFields = {};
    if (name) userFields.name = name;
    if (email) userFields.email = email;
    if (password) userFields.password = password;
  
    try {
      let user = await User.findById(req.params.id);
      if (!user) {
        return res.status(404).json({ msg: "User not found" });
      }
      user = await User.findByIdAndUpdate(
        req.params.id,
        { $set: userFields },
        { new: true }
      );
      res.json(user);
    } catch (err) {
      console.error(err.message);
      res.status(500).send("Server Error");
    }
  });
  
  // Delete user by ID
  router.delete("/:id", auth, async (req, res) => {
    try {
      let user = await User.findById(req.params.id);
      if (!user) {
        return res.status(404).json({ msg: "User not found" });
      }
      await User.findByIdAndRemove(req.params.id);
      res.json({ msg: "User removed" });
    } catch (err) {
      console.error(err.message);
      res.status(500).send("Server Error");
    }
  });
  


module.exports = router;




